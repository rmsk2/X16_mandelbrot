VERA = $9F20
VERA_CTRL = $9F25
VERA_DATA_0 = $9F23
CINT = $FF81
screen_mode = $FF5F

; --------------------------------------------------
; This routine set the next point in a colour defined by 
; NUM_ITER.
;
; drawPoint has no return value. 
; --------------------------------------------------
drawPoint
    lda NUM_ITER
    cmp MAX_ITER
    beq .plotBlack
    adc #47
    sta VERA_DATA_0
    rts
.plotBlack
    lda #0
    sta VERA_DATA_0
    rts


; --------------------------------------------------
; This routine turns the 320x240@256 colours mode on
;
; bitMapOn has no return value. 
; --------------------------------------------------
bitMapOn
    lda #$80
    clc
    jsr screen_mode      
    bcs .endErrInit      ; carry is set on error
    lda #%11111110
    and VERA_CTRL
    sta VERA_CTRL        ; select data port 0
    lda #0
    sta VERA             
    sta VERA+1
    lda #16              ; set increment to 1 and set most significant bit of VRAM address to 0
    sta VERA+2           ; VRAM address is set to 0 with a one byte increment
.endErrInit
    rts

; --------------------------------------------------
; This routine restores the text screen
;
; bitMapOff has no return value. 
; --------------------------------------------------
bitMapOff
    jsr CINT
    rts

!macro autoIncOn {
    lda VERA + 2
    ora #16
    sta VERA + 2
}

!macro autoIncOff {
    lda VERA + 2
    and #%11101111
    sta VERA + 2
}

REV_X
!byte 0, 0
REV_Y
!byte 0

CONST_320
!byte 0, <RES_X, >RES_X, 0, 0

TEMP_32_X
!byte 0, 0, 0, 0, 0

TEMP_32_Y
!byte 0, 0, 0, 0, 0

; --------------------------------------------------

calcVRAMAddress
    ; calculate Video RAM address
    +callFuncMono clear32Bit, TEMP_32_X
    +callFuncMono clear32Bit, TEMP_32_Y
    lda REV_Y
    sta TEMP_32_Y + 1
    +move16Bit REV_X, TEMP_32_X + 1
    +callFunc mul32BitUnsignedInt, CONST_320, TEMP_32_Y
    +callFunc add32BitUnsigned, TEMP_32_Y, TEMP_32_X

    rts

; --------------------------------------------------

reverseHLine
    +move16Bit ZOOM_X_POS, REV_X
    lda ZOOM_Y_POS
    sta REV_Y
    jsr calcVRAMAddress

    lda TEMP_32_X + 1
    sta VERA
    lda TEMP_32_X + 2
    sta VERA + 1
    lda TEMP_32_X + 3
    sta VERA + 2 

    ; select data port 0
    lda #%11111110
    and VERA_CTRL
    sta VERA_CTRL 

.loopLineX
    lda VERA_DATA_0
    eor #$FF
    tax
    +autoIncOn
    txa
    sta VERA_DATA_0
    +autoIncOff
    +inc16Bit REV_X
    +cmp16BitImmediate RES_X, REV_X
    bne .loopLineX

    rts

; --------------------------------------------------

reverseVLine
    +move16Bit ZOOM_X_POS, REV_X
    lda ZOOM_Y_POS
    sta REV_Y
    jsr calcVRAMAddress

    +autoIncOff
.loopLineY
    lda TEMP_32_X + 1
    sta VERA
    lda TEMP_32_X + 2
    sta VERA + 1
    lda TEMP_32_X + 3
    sta VERA + 2 

    lda VERA_DATA_0
    eor #$FF
    sta VERA_DATA_0

    inc REV_Y
    lda REV_Y
    cmp #RES_Y
    beq .doneVline

    +callFunc add32BitUnsigned, CONST_320, TEMP_32_X
    bra .loopLineY 

.doneVline
    rts

ZOOM_X_SIZE
!byte $40, $01
ZOOM_Y_SIZE
!byte 240

ZOOM_X_POS
!byte 0, 0
ZOOM_Y_POS
!byte 120
; --------------------------------------------------
; This routine draws a rectangle on the bitmap screen which symbolizes the
; zoom level.
;
; drawZoomRect has no return value
; --------------------------------------------------
drawZoomRect
    jsr reverseVLine

    rts