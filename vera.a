VERA = $9F20
VERA_CTRL = $9F25
VERA_DATA_0 = $9F23
CINT = $FF81
screen_mode = $FF5F

; Keys used in zooming
CURSOR_UP = $91
CURSOR_DOWN = $11
CURSOR_RIGHT = $1D
CURSOR_LEFT = $9d
KEY_RETURN = $0d
ZOOM_IN = $85;F1
ZOOM_OUT = $86;F3
ESCAPE = $89; F2

; --------------------------------------------------
; This macro generates code for turning on the auto increment
; functionality for VRAM access.
; --------------------------------------------------
!macro autoIncOn {
    lda VERA + 2
    ora #16
    sta VERA + 2
}

; --------------------------------------------------
; This macro generates code for turning off the auto increment
; functionality for VRAM access.
; --------------------------------------------------
!macro autoIncOff {
    lda VERA + 2
    and #%11101111
    sta VERA + 2
}

; --------------------------------------------------
; This macro generates code for selecting the VRAM address
; which is used for the next read or write operaton in video RAM
; --------------------------------------------------
!macro loadVeraRegisters .addr {
    lda .addr
    sta VERA
    lda .addr + 1
    sta VERA + 1
    lda .addr + 2
    sta VERA + 2 
}

; --------------------------------------------------
; This macro generates code for saving the VRAM address
; which is used for the next read or write operaton in video RAM
; --------------------------------------------------
!macro saveVeraRegisters .addr {
    lda VERA
    sta .addr
    lda VERA + 1
    sta .addr + 1
    lda VERA + 2
    sta .addr + 2
}

; --------------------------------------------------
; This macro generates code for setting the VRAM read/write address
; to 0.
; --------------------------------------------------
!macro setVRAMStart {
    lda #0
    sta VERA             
    sta VERA + 1
    sta VERA + 2    
}

; --------------------------------------------------
; This macro generates code for selecting the data port 0 of the
; Vera chip
; --------------------------------------------------
!macro selectDataPort0 {
    lda #%11111110
    and VERA_CTRL
    sta VERA_CTRL     
}

; --------------------------------------------------
; This routine set the next point in a colour defined by 
; NUM_ITER.
;
; drawPoint has no return value. 
; --------------------------------------------------
drawPoint
    lda NUM_ITER
    cmp MAX_ITER
    beq .plotBlack
    clc
    adc #47
    sta VERA_DATA_0
    rts
.plotBlack
    lda #0
    sta VERA_DATA_0
    rts


; --------------------------------------------------
; This routine turns the 320x240@256 colours mode on
;
; bitMapOn has no return value. 
; --------------------------------------------------
bitMapOn
    lda #$80
    clc
    jsr screen_mode      
    bcs .endErrInit      ; carry is set on error
initVeraRegisters
    +selectDataPort0
    +setVRAMStart
    +autoIncOn
.endErrInit
    rts


; --------------------------------------------------
; This routine restores the text screen
;
; bitMapOff has no return value. 
; --------------------------------------------------
bitMapOff
    jsr CINT
    rts


.CONST_X_RES
!byte 0, <RES_X, >RES_X, 0, 0

.VRAM_32Bit
!byte 0                                        ; sign byte
.VRAM                                          ; values bytes
!byte 0, 0, 0, 0

.TEMP_32_Y
!byte 0, 0, 0, 0, 0

.PIXEL_X
!byte 0, 0
.PIXEL_Y
!byte 0

; --------------------------------------------------
; This routine calculates the VRAM address of the pixel given in .PIXEL_X and
; .PIXEL_Y. 
;
; It returns the calculation result in the three bytes starting at address .VRAM
; --------------------------------------------------
calcVRAMAddress
    +callFuncMono clear32Bit, .VRAM_32Bit
    +callFuncMono clear32Bit, .TEMP_32_Y
    lda .PIXEL_Y
    sta .TEMP_32_Y + 1
    +move16Bit .PIXEL_X, .VRAM
    +callFunc mul32BitUnsignedInt, .CONST_X_RES, .TEMP_32_Y
    +callFunc add32BitUnsigned, .TEMP_32_Y, .VRAM_32Bit

    rts

.H_START_X
!byte 0, 0
.H_START_Y
!byte 0
.H_LEN
!byte 0, 0

.H_END_X
!byte 0, 0

.exitHline
    jmp .hLineDone
; --------------------------------------------------
; This routine draws a horizontal line on the bitmap screen by reversing the color
; of all pixels on the line. The starting position is given .H_STARTX and .H_START_Y.
; The length is specified by .H_LEN. Precondition: .H_START_X < RES_X.
;
; The routine has no return value.
; --------------------------------------------------
reverseHLine
    ; clip screen coordinates
    lda .H_START_Y
    cmp #RES_Y
    bcs .exitHline                                   ; Y-Coordinate too big  => do nothing
   
    +move16Bit .H_START_X, .H_END_X
    +add16Bit .H_LEN, .H_END_X                       ; calculate end X-coordinate
    +cmp16BitImmediate RES_X, .H_END_X               
    beq .beginHDraw                                  ; RES_X == .H_END_X => Begin to draw
    bcc .clipX                                       ; RES_X < .H_END_X => Clip to RES_X
    bra .beginHDraw                                  ; RES_X > .H_END_X => Begin to draw
.clipX
    +load16BitImmediate RES_X, .H_END_X

.beginHDraw
    +move16Bit .H_START_X, .PIXEL_X
    lda .H_START_Y
    sta .PIXEL_Y
    jsr calcVRAMAddress

    +loadVeraRegisters .VRAM

.loopLineX
    lda VERA_DATA_0
    eor #$FF
    tax
    +autoIncOn
    txa
    sta VERA_DATA_0
    +autoIncOff

    +inc16Bit .H_START_X
    +cmp16Bit .H_END_X, .H_START_X
    bne .loopLineX

.hLineDone
    rts


.V_START_X
!byte 0, 0
.V_START_Y
!byte 0
.V_LEN
!byte 0, 0

.V_END_Y
!byte 0, 0

.exitVline
    jmp .doneVline
; --------------------------------------------------
; This routine draws a vertical line on the bitmap screen by reversing the color
; of all pixels on the line. The starting position is given .V_STARTX and .V_START_Y.
; The length is specified by .V_LEN. Precondition: .V_START_Y < RES_Y.
;
; The routine has no return value.
; --------------------------------------------------
reverseVLine
    ; clip X coordinate
    +cmp16BitImmediate RES_X, .V_START_X
    beq .exitVline
    bcc .exitVline
    ; Here we can be sure that .V_START_X < RES_X
    ; Now clip Y coordinate of end point
    +load16BitImmediate 0, .V_END_Y
    lda .V_START_Y
    sta .V_END_Y
    +add16Bit .V_LEN, .V_END_Y
    +cmp16BitImmediate RES_Y, .V_END_Y
    beq .beginVDraw
    bcc .clipY
    bra .beginVDraw
.clipY    
    ; Y end position is RES_Y
    lda #RES_Y
    sta .V_END_Y

.beginVDraw
    +move16Bit .V_START_X, .PIXEL_X
    lda .V_START_Y
    sta .PIXEL_Y
    jsr calcVRAMAddress

    +autoIncOff
.loopLineY
    +loadVeraRegisters .VRAM

    ; reverse pixel
    lda VERA_DATA_0
    eor #$FF
    sta VERA_DATA_0

    inc .V_START_Y
    lda .V_START_Y
    cmp .V_END_Y
    beq .doneVline

    +callFunc add32BitUnsigned, .CONST_X_RES, .VRAM_32Bit
    bra .loopLineY 

.doneVline
    rts

; --------------------------------------------------
; This routine resets all parameters which are needed to select a zoom section.
;
; resetZoomRectDefault has no return value.
; --------------------------------------------------
resetZoomRectDefault
    +load16BitImmediate (RES_X / 2), ZOOM_X_SIZE
    lda #(RES_Y / 2)
    sta ZOOM_Y_SIZE
    +load16BitImmediate 10, ZOOM_X_POS
    lda #10
    sta ZOOM_Y_POS
    lda #1
    sta ZOOM_DIFF
    rts

MAX_ZOOM_DIFF = 4

ZOOM_DIFF
!byte 0

ZOOM_X_SIZE
!byte 160, 0
ZOOM_Y_SIZE
!byte 120

ZOOM_X_POS
!byte 0, 0
ZOOM_Y_POS
!byte 0
; --------------------------------------------------
; This routine draws a rectangle on the bitmap screen which symbolizes the
; section of the Mandelbrot set that is zoomed into. Drawing is done by reversing 
; the color of affected pixels which means the original state is restored 
; when the reversing is repeated a second time.
;
; drawZoomRect has no return value.
; --------------------------------------------------
drawZoomRect
    ; draw upper horizontal line
    +move16Bit ZOOM_X_POS, .H_START_X
    lda ZOOM_Y_POS
    sta .H_START_Y
    +move16Bit ZOOM_X_SIZE, .H_LEN
    jsr reverseHLine

    ; draw lower horizontal line
    +move16Bit ZOOM_X_POS, .H_START_X
    lda ZOOM_Y_POS
    clc
    adc ZOOM_Y_SIZE
    bcc .storeYpos                                             ; take care of 8 bit unsigned overflow
    lda #$ff
.storeYpos
    sta .H_START_Y
    +move16Bit ZOOM_X_SIZE, .H_LEN
    jsr reverseHLine

    ; draw left vertical line
    +move16Bit ZOOM_X_POS, .V_START_X
    lda ZOOM_Y_POS
    sta .V_START_Y
    lda ZOOM_Y_SIZE
    sta .V_LEN
    jsr reverseVLine

    ; draw right vertical line
    +move16Bit ZOOM_X_POS, .V_START_X
    +add16Bit  ZOOM_X_SIZE, .V_START_X
    lda ZOOM_Y_POS
    sta .V_START_Y
    lda ZOOM_Y_SIZE
    sta .V_LEN
    jsr reverseVLine

    rts

ZOOM_OK = 0
ZOOM_ESCAPE = 1

ZOOM_RESULT
!byte ZOOM_OK

; --------------------------------------------------
; This routine allows to select a new subsection of the Mandelbrot set for
; visualization. 
; 
; The selected pixel and additional zoom levels can be read from ZOOM_X_POS, 
; ZOOM_Y_POS and ZOOM_DIFF as soon as the subroutine has returned. The address
; ZOOM_RESULT contains ZOOK_OK if the selection was finished and ZOOM_ESCAPE
; if the user cancelled the action.
; --------------------------------------------------
showZoomRect
    +saveVeraRegisters SAVED_VERA_STATE
    ; we only can zoom in if the current ZOOM_LEVEL
    ; is smaller than MAX_ZOOM_LEVEL
    lda ZOOM_LEVEL
    cmp #MAX_ZOOM_LEVEL
    bcc .zoomAllowed

    lda #ZOOM_ESCAPE
    sta ZOOM_RESULT

    jmp .zoomDone

.zoomAllowed
    lda #ZOOM_OK
    sta ZOOM_RESULT
    jsr resetZoomRectDefault
    jsr drawZoomRect
.commandLoop
    jsr waitForKey
    cmp #CURSOR_LEFT
    bne .checkRight

    ; handle Cursor left key
    +cmp16BitImmediate 0, ZOOM_X_POS
    beq .skipLeft                                               ; we can not go further left if we are at x-position zero
    ; move section to the left
    jsr drawZoomRect
    +dec16Bit ZOOM_X_POS
    jsr drawZoomRect
.skipLeft
    jmp .commandLoop

.checkRight
    cmp #CURSOR_RIGHT
    bne .checkUp

    ; handle Cursor right key
    +cmp16BitImmediate RES_X-1, ZOOM_X_POS
    beq .skipRight                                              ; we can not go further to the right when we are at x-position RES_X - 1

    ; move section to the right
    jsr drawZoomRect
    +inc16Bit ZOOM_X_POS
    jsr drawZoomRect
.skipRight
    jmp .commandLoop

.checkUp
    cmp #CURSOR_UP
    bne .checkDown

    ; handle Cursor up key
    lda ZOOM_Y_POS                                              ; we can not go further up if we are at y-position zero
    beq .skipUp

    ; Move section up
    jsr drawZoomRect
    dec ZOOM_Y_POS
    jsr drawZoomRect
.skipUp    
    jmp .commandLoop

.checkDown
    cmp #CURSOR_DOWN
    bne .checkZoomIn

    ; handle Cursor down key
    lda ZOOM_Y_POS                                              ; we can not go further down if we are at y-position RES_Y - 1
    cmp #RES_Y-1
    beq .skipDown

    ; move section down
    jsr drawZoomRect
    inc ZOOM_Y_POS
    jsr drawZoomRect
.skipDown    
    jmp .commandLoop

.checkZoomIn
    cmp #ZOOM_IN
    bne .checkZoomOut
    
    ; handle F1 key
    lda ZOOM_DIFF
    cmp #MAX_ZOOM_DIFF
    beq .skipZoomIn                                             ; We can only zoom in MAX_ZOOM_DIFF levels in the same pricture

    lda ZOOM_LEVEL
    clc
    adc ZOOM_DIFF
    cmp #MAX_ZOOM_LEVEL
    bcs .skipZoomIn                                             ; We can only zoom in the maximum number of allowed levels in order to prevent accuracy problems

    ; Zoom in and halve selection frame in size
    inc ZOOM_DIFF
    jsr drawZoomRect
    +halve16Bit ZOOM_X_SIZE
    lsr ZOOM_Y_SIZE
    jsr drawZoomRect

.skipZoomIn
    jmp .commandLoop
.checkZoomOut
    cmp #ZOOM_OUT
    bne .checkReturn

    ; handle F3 key
    lda ZOOM_DIFF
    beq .skipZoomOut                                           ; we can not zoom out of the current picture, i.e. if ZOOM_DIFF is zero
    
    ; Zoom out and double selection frame in size
    dec ZOOM_DIFF
    jsr drawZoomRect
    +double16Bit ZOOM_X_SIZE
    asl ZOOM_Y_SIZE
    jsr drawZoomRect

.skipZoomOut    
    jmp .commandLoop
.checkReturn
    cmp #KEY_RETURN
    bne .checkEscape
    bra .zoomDone                                               ; Return was pressed => End selection     
.checkEscape
    cmp #ESCAPE
    bne .skipEscape
    jsr drawZoomRect
    lda #ZOOM_ESCAPE
    sta ZOOM_RESULT
    bra .zoomDone
.skipEscape
    jmp .commandLoop
.zoomDone
    +loadVeraRegisters SAVED_VERA_STATE
    rts


!macro vpoke .x, .y, .code {
    lda #.x
    sta TXT_ADDR
    lda #.y
    sta TXT_ADDR + 1
    lda #.code
    sta TXT_CODE
    jsr vpokeCall
}

!macro vpokeAddr .x, .y, .code {
    lda .x
    sta TXT_ADDR
    lda .y
    sta TXT_ADDR + 1
    lda #.code
    sta TXT_CODE
    jsr vpokeCall
}

!macro vpokeWithCol .x, .y, .code, .col {
    lda #.x
    sta TXT_ADDR
    lda #.y
    sta TXT_ADDR + 1
    lda #.code
    sta TXT_CODE
    jsr vpokeCall
    lda #.col
    sta TXT_COLOUR
    jsr vpokeColorCall
}

!macro vpokeAddrWithCol .xAddr, .yAddr, .code, .col {
    lda .xAddr
    sta TXT_ADDR
    lda .yAddr
    sta TXT_ADDR + 1
    lda #.code
    sta TXT_CODE
    jsr vpokeCall
    lda #.col
    sta TXT_COLOUR
    jsr vpokeColorCall
}


TXT_COLOUR
!byte 0
TXT_CODE
!byte 0

TXT_ADDR
!byte 0, 0, 1

; --------------------------------------------------
; This routine allows to write the value stored at TXT_CODE to the text mode
; video memory at the coordinates X and Y where X is stored by the caller
; in TXT_ADDR and Y in TEXT_ADDR + 1.
;
; This routine does not return a value.
; --------------------------------------------------
vpokeCall 
    asl TXT_ADDR                                       ; multiply X position by 2 => Lo byte value
    clc
    lda #$B0                                           ; Lines are 256 bytes long(!!).
    adc TXT_ADDR + 1                                   ; We therefore simply have to add $B0 to
    sta TXT_ADDR + 1                                   ; the Y position of the Vera address hi byte.
    +loadVeraRegisters TXT_ADDR                        ; Now load address.
    lda TXT_CODE
    sta VERA_DATA_0                                    ; store character in screen RAM
    rts

!macro vpokeColor .col {
    lda #.col
    sta TXT_COLOUR
    jsr vpokeColorCall
}

; --------------------------------------------------
; This routine allows to change the color of the character stored in
; video memory at the coordinates X and Y. This routine assumes that
; vpokeCall has already been called before the call to vpokeColor.
; The two nibbles of the colour value specify a fore- and a background
; colour.
;
; This routine does not return a value.
; --------------------------------------------------
vpokeColorCall
    +add16BitImmediate 1, VERA                        ; color cell is the byte following the character itself
    lda TXT_COLOUR
    sta VERA_DATA_0                                   ; store colour value
    rts


HOR_BAR_UPPER = 119
HOR_BAR_LOWER = 111
VERT_BAR_LEFT = 116
VERT_BAR_RIGHT = 106
LEFT_UPPER_EDGE = 79
RIGHT_UPPER_EDGE = 80
RIGHT_LOWER_EDGE = 122
LEFT_LOWER_EDGE = 76

!macro petsciiRect .x, .y, .w, .h {
    lda #.x
    sta PETSCII_COORD_X
    lda #.y
    sta PETSCII_COORD_Y
    lda #.h
    sta PETSCII_HEIGHT
    lda #.w
    sta PETSCII_WIDTH
    jsr petsciiRectCall
}

PETSCII_COORD_X
!byte 0
PETSCII_WIDTH
!byte 0
PETSCII_COORD_Y
!byte 0
PETSCII_HEIGHT
!byte 0
.PETSCII_COUNT
!byte 0
; --------------------------------------------------
; This routine allows to draw a PETSCII Rectangle on the 80x60 text screen.
; 
; PETSCII_CORD_X, PETSCII_COORD_Y, PETSCII_WIDTH and PETSCII_HEIGHT
; specify the form of the rectangle
; --------------------------------------------------
petsciiRectCall
    +saveVeraRegisters SAVED_VERA_STATE
    +selectDataPort0
    +autoIncOff



    +vpokeWithCol 60, 17, LEFT_UPPER_EDGE, $16
    +vpokeWithCol 61, 17, HOR_BAR_UPPER, $16
    +vpokeColor $16
    +vpoke 62, 17, RIGHT_UPPER_EDGE
    +vpoke 60, 18, VERT_BAR_LEFT
    +vpoke 62, 18, VERT_BAR_RIGHT
    +vpoke 60, 19, LEFT_LOWER_EDGE
    +vpoke 61, 19, HOR_BAR_LOWER
    +vpoke 62, 19, RIGHT_LOWER_EDGE

    +loadVeraRegisters SAVED_VERA_STATE
    rts