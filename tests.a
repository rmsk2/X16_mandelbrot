
TEXT_OK
!byte 4
!tx "OK"
!byte 13, 13

TEXT_FAILURE
!byte 10
!tx "FAILURE!!"
!byte 13

TEXT_EXPECTED
!byte 10
!tx "EXPECTED: "

TEXT_EQUAL
!byte 6
!tx "EQUAL"
!byte 13

TEXT_CARRY_CLEAR
!byte 11
!tx "CARRY CLEAR"
!byte 13

TEXT_UNEQUAL
!byte 8
!tx "UNEQUAL"
!byte 13

TEXT_CARRY_SET
!byte 10
!tx "CARRY SET"
!byte 13


!macro perfTest .func, .operL, .operR, .info {    
    +printStr .info
    jsr printCRLF
    +printFixedPoint .operL
    +printFixedPoint .operR
    +callFunc .func, .operL, .operR
    php
    +printFixedPoint .operR
    plp
}

!macro perfTestUint .func, .operL, .operR, .info {    
    +printStr .info
    jsr printCRLF
    +printUnsigned .operL
    +printUnsigned .operR
    +callFunc .func, .operL, .operR
    php
    +printUnsigned .operR
    plp
}

!macro perfTestMono .func, .operL, .info {    
    +printStr .info
    jsr printCRLF
    +printFixedPoint .operL
    +callFuncMono .func, .operL
    php
    +printFixedPoint .operL
    plp
}

!macro perfTestCompare .func, .operL, .operR, .info {
    +printStr .info
    jsr printCRLF
    +printFixedPoint .operL
    +printFixedPoint .operR
    +callFunc .func, .operL, .operR
}

!macro expectValue .val, .ref {
    +callFunc isEqual32Bit, .val, .ref
    beq .testOK
    +printStr TEXT_FAILURE
    +printStr TEXT_EXPECTED
    +printFixedPoint .ref
    jmp testEnd
.testOK
    +printStr TEXT_OK
}

!macro expectValueUint .val, .ref {
    +callFunc isEqual32Bit, .val, .ref
    beq .testOK
    +printStr TEXT_FAILURE
    +printStr TEXT_EXPECTED
    +printUnsigned .ref
    jmp testEnd
.testOK
    +printStr TEXT_OK
}


!macro expectEqual {
    beq .testOK 
    +printStr TEXT_FAILURE
    +printStr TEXT_EXPECTED
    +printStr TEXT_EQUAL
    jmp testEnd
.testOK
    +printStr TEXT_OK
}

!macro expectUnequal {
    bne .testOK 
    +printStr TEXT_FAILURE
    +printStr TEXT_EXPECTED
    +printStr TEXT_UNEQUAL
    jmp testEnd
.testOK
    +printStr TEXT_OK
}

!macro expectCarryClear {
    bcc .testOK 
    +printStr TEXT_FAILURE
    +printStr TEXT_EXPECTED
    +printStr TEXT_CARRY_CLEAR
    jmp testEnd
.testOK
    +printStr TEXT_OK
}

!macro expectCarrySet {
    bcs .testOK 
    +printStr TEXT_FAILURE
    +printStr TEXT_EXPECTED
    +printStr TEXT_CARRY_SET
    jmp testEnd
.testOK
    +printStr TEXT_OK
}

; --------------------------------------------------

.TXT_READING_RTC
!byte 12
!tx "READING RTC"
!byte 13

; --------------------------------------------------

.TXT_READING_RTC_I2C
!byte 20
!tx "READING RTC VIA I2C"
!byte 13

; --------------------------------------------------

.TIME_STR
!byte 0
!byte 0,0,0,0,0,0,0,0

; --------------------------------------------------

.TXT_TIME7
!byte 32
!tx "02:17:59 + 14:53:02 == 17:11:01" 
!byte 13

.TIME13
!byte $59, $17, $2
.TIME14
!byte $02, $53, $14
.TIME15
!byte $01, $11, $17

; --------------------------------------------------

.TXT_TIME9
!byte 36
!tx "22:17:25 UNTIL 00:35:02 == 02:17:37" 
!byte 13

.TIME19
!byte $25, $17, $22
.TIME20
!byte $02, $35, $00
.TIME21
!byte $37, $17, $02

; --------------------------------------------------
;-01 45 66 B4
TEST_INIT_REAL
!byte 1,$B4,$66,$45,$01

;00 64 B8 0A
TEST_INIT_IMAG 
!byte 0,$0A,$B8,$64,$00

; 00 00 04 CC
TEST_STEP_X 
!byte 0,$CC,$04,$00,$00

;-00 00 04 E2
TEST_STEP_Y
!byte 1,$E2,$04,$00,$00

runOneSequence
    +callFunc move32Bit, TEST_INIT_REAL, INIT_REAL
    +callFunc move32Bit, TEST_INIT_IMAG, INIT_IMAG  

    +callFunc move32Bit, TEST_STEP_X, STEP_X
    +callFunc move32Bit, TEST_STEP_Y, STEP_Y  

    +load16BitImmediate 127, COUNT_X
    lda #101
    sta COUNT_Y
    jsr deriveParametersFromPixel

    +callFunc move32Bit, INIT_REAL, REAL
    +callFunc move32Bit, INIT_IMAG, IMAG
    lda #64 
    sta MAX_ITER
    jsr calcOneMandelbrotSequence
    ;lda NUM_ITER
    ;jsr printByteCRLF
    rts

; --------------------------------------------------


testMain
; -------------------------------------------------- 
    +printStr .TXT_READING_RTC_I2C 
    +getTimeStr .TIME_STR, RTCI2C
    +printStr .TIME_STR
    jsr printCRLF
    jsr printCRLF   
; --------------------------------------------------
    +printStr .TXT_TIME7
    +addTimeSimple .TIME13, .TIME14
    +getTimeStr .TIME_STR, .TIME14
    +printStr .TIME_STR
    jsr printCRLF
    +cmpTime .TIME14, .TIME15
    +expectEqual
; --------------------------------------------------
    +printStr .TXT_TIME9
    +diffTime .TIME19, .TIME20
    +getTimeStr .TIME_STR, .TIME20
    +printStr .TIME_STR
    jsr printCRLF
    +cmpTime .TIME21, .TIME20
    +expectEqual
; --------------------------------------------------
    ;jsr runOneSequence    
; --------------------------------------------------
    ;+petsciiRect 7, 40, 20, 1, RECT_NO_CLEAR
    ;+petsciiRect 5, 7, 15, 20, RECT_CLEAR
; --------------------------------------------------    
testEnd
    rts