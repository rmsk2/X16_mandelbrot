
TEXT_OK
!byte 4
!tx "OK"
!byte 13, 13

TEXT_FAILURE
!byte 10
!tx "FAILURE!!"
!byte 13

TEXT_EXPECTED
!byte 10
!tx "EXPECTED: "

TEXT_EQUAL
!byte 6
!tx "EQUAL"
!byte 13

TEXT_CARRY_CLEAR
!byte 11
!tx "CARRY CLEAR"
!byte 13

TEXT_UNEQUAL
!byte 8
!tx "UNEQUAL"
!byte 13

TEXT_CARRY_SET
!byte 10
!tx "CARRY SET"
!byte 13


!macro perfTest .func, .operL, .operR, .info {    
    +printStr .info
    jsr printCRLF
    +printFixedPoint .operL
    +printFixedPoint .operR
    +callFunc .func, .operL, .operR
    php
    +printFixedPoint .operR
    plp
}

!macro perfTestMono .func, .operL, .info {    
    +printStr .info
    jsr printCRLF
    +printFixedPoint .operL
    +callFuncMono .func, .operL
    php
    +printFixedPoint .operL
    plp
}

!macro perfTestCompare .func, .operL, .operR, .info {
    +printStr .info
    jsr printCRLF
    +printFixedPoint .operL
    +printFixedPoint .operR
    +callFunc .func, .operL, .operR
}

!macro expectValue .val, .ref {
    +callFunc isEqual32Bit, .val, .ref
    beq .testOK
    +printStr TEXT_FAILURE
    +printStr TEXT_EXPECTED
    +printFixedPoint .ref
    jmp testEnd
.testOK
    +printStr TEXT_OK
}

!macro expectEqual {
    beq .testOK 
    +printStr TEXT_FAILURE
    +printStr TEXT_EXPECTED
    +printStr TEXT_EQUAL
    jmp testEnd
.testOK
    +printStr TEXT_OK
}

!macro expectUnequal {
    bne .testOK 
    +printStr TEXT_FAILURE
    +printStr TEXT_EXPECTED
    +printStr TEXT_UNEQUAL
    jmp testEnd
.testOK
    +printStr TEXT_OK
}

!macro expectCarryClear {
    bcc .testOK 
    +printStr TEXT_FAILURE
    +printStr TEXT_EXPECTED
    +printStr TEXT_CARRY_CLEAR
    jmp testEnd
.testOK
    +printStr TEXT_OK
}

!macro expectCarrySet {
    bcs .testOK 
    +printStr TEXT_FAILURE
    +printStr TEXT_EXPECTED
    +printStr TEXT_CARRY_SET
    jmp testEnd
.testOK
    +printStr TEXT_OK
}

.MINUS_ONE
!byte 1,0,0,0,1

.PLUS_ONE
!byte 0,0,0,0,1

; --------------------------------------------------

.TEXT_EQUAL_1
!byte 16
!tx "+1 AND -1 DIFFER"

.TEXT_MUL_1
!byte 11
!tx "-1 * 1 = -1"

.TEXT_SQUARE_1
!byte 13
!tx "SQUARE -1 = 1"

; -1
.TEST_VAL_1
!byte 1,0,0,0,1

;+1
.TEST_VAL_2
!byte 0,0,0,0,1

; --------------------------------------------------

.TEXT_EQUAL_2
!byte 19
!tx "+0 AND -0 ARE EQUAL"

.PLUS_NULL
!byte 0,0,0,0,0

.MINUS_NULL
!byte 1,0,0,0,0

; --------------------------------------------------

.TEXT_GT_1
!byte 6
!tx "2 >= 1"

.TEXT_LT_1
!byte 6
!tx "1 < 2"

.PLUS_TWO
!byte 0,0,0,0,2

; --------------------------------------------------

.TEXT_SQ_1
!byte 18
!tx "SQUARE -1/4 = 1/16"

.VAL_FOURTH
!byte 1, 0, 0, $40, 0 

.VAL_16TH
!byte 0, 0, 0, $10, 0

; --------------------------------------------------

.TEXT_MUL_2
!byte 17
!tx "-1/4 * -1/2 = 1/8"

.VAL_FOURTH_2
!byte 1, 0, 0, $40, 0 

.VAL_HALVE
!byte 1, 0, 0, $80, 0 

.VAL_8TH
!byte 0, 0, 0, $20, 0

; --------------------------------------------------

.TEXT_ADD_1
!byte 22
!tx "1 3/4 + -(1 1/2) = 1/4"

.VAL_1_ADD_1
!byte 0,0,0,$c0,1

.VAL_2_ADD_1
!byte 1,0,0,$80,1

.ADD_1_RES
!byte 0,0,0,$40,0

; --------------------------------------------------

.TEXT_MUL_3
!byte 22
!tx "FFFF * FC89 = FC880377"

.VAL_1_MUL_3
!byte 0,$ff,$ff,0,0

.VAL_2_MUL_3
!byte 0,$89,$fc,0,0

.MUL_3_RES
!byte 0,$77,3,$88,$fc

; --------------------------------------------------

.TXT_READING_RTC
!byte 12
!tx "READING RTC"
!byte 13

; --------------------------------------------------

.TXT_READING_RTC_I2C
!byte 20
!tx "READING RTC VIA I2C"
!byte 13

; --------------------------------------------------

.TIME_STR
!byte 0
!byte 0,0,0,0,0,0,0,0

; --------------------------------------------------

.TXT_TIME1
!byte 20
!tx "05:01:23 > 05:01:22" 
!byte 13

.TXT_TIME2
!byte 20
!tx "05:01:22 < 05:01:23" 
!byte 13

.TXT_TIME3
!byte 21
!tx "05:01:22 == 05:01:22" 
!byte 13

.TIME1
!byte 1,0,0
.TIME2 
!byte $23, 1, 5
.TIME3
!byte $22, 1, 5

; --------------------------------------------------

.TXT_TIME4
!byte 32
!tx "05:00:23 - 04:53:24 == 00:06:59" 
!byte 13

.TIME4
!byte $24, $53, 4
.TIME5
!byte $23, 0, 5
.TIME6
!byte $59, $06, 0

; --------------------------------------------------

.TXT_TIME5
!byte 32
!tx "05:01:23 - 05:00:22 == 00:01:01" 
!byte 13

.TIME7
!byte $22, $00, 5
.TIME8
!byte $23, 1, 5
.TIME9
!byte $01, $01, 0

; --------------------------------------------------

.TXT_TIME6
!byte 32
!tx "24:00:00 - 23:52:12 == 00:07:48" 
!byte 13

.TIME10
!byte $12, $52, $23
.TIME11
!byte $00, 0, $24
.TIME12
!byte $48, $07, 0

; --------------------------------------------------

.TXT_TIME7
!byte 32
!tx "02:17:59 + 14:53:02 == 17:11:01" 
!byte 13

.TIME13
!byte $59, $17, $2
.TIME14
!byte $02, $53, $14
.TIME15
!byte $01, $11, $17

; --------------------------------------------------

.TXT_TIME8
!byte 36
!tx "17:05:32 UNTIL 22:35:02 == 05:29:30" 
!byte 13

.TIME16
!byte $32, $05, $17
.TIME17
!byte $02, $35, $22
.TIME18
!byte $30, $29, $05

; --------------------------------------------------

.TXT_TIME9
!byte 36
!tx "22:17:25 UNTIL 00:35:02 == 02:17:37" 
!byte 13

.TIME19
!byte $25, $17, $22
.TIME20
!byte $02, $35, $00
.TIME21
!byte $37, $17, $02

; --------------------------------------------------
;-01 45 66 B4
TEST_INIT_REAL
!byte 1,$B4,$66,$45,$01

;00 64 B8 0A
TEST_INIT_IMAG 
!byte 0,$0A,$B8,$64,$00

; 00 00 04 CC
TEST_STEP_X 
!byte 0,$CC,$04,$00,$00

;-00 00 04 E2
TEST_STEP_Y
!byte 1,$E2,$04,$00,$00

runOneSequence
    +callFunc move32Bit, TEST_INIT_REAL, INIT_REAL
    +callFunc move32Bit, TEST_INIT_IMAG, INIT_IMAG  

    +callFunc move32Bit, TEST_STEP_X, STEP_X
    +callFunc move32Bit, TEST_STEP_Y, STEP_Y  

    +load16BitImmediate 127, COUNT_X
    lda #101
    sta COUNT_Y
    jsr deriveParametersFromPixel

    +callFunc move32Bit, INIT_REAL, REAL
    +callFunc move32Bit, INIT_IMAG, IMAG
    lda #64 
    sta MAX_ITER
    jsr calcOneMandelbrotSequence
    ;lda NUM_ITER
    ;jsr printByteCRLF
    rts

; --------------------------------------------------

.TEXT_MUL_BUG
!byte 35
!tx "-01.430580 * 00.62CAE0 = -00.7CA817"

.VAL_1_MUL_BUG
!byte 1,$80,$05,$43,$01

.VAL_2_MUL_BUG
!byte 0,$E0,$CA,$62,$00

.VAL_3_MUL_BUG
!byte 1,$17,$A8,$7C,$00

; --------------------------------------------------


testMain
    +perfTestCompare isEqual32Bit, .TEST_VAL_1, .TEST_VAL_2, .TEXT_EQUAL_1
    +expectUnequal 
; --------------------------------------------------    
    +perfTestCompare isEqual32Bit, .PLUS_NULL, .MINUS_NULL, .TEXT_EQUAL_2
    +expectEqual
; --------------------------------------------------    
    +perfTest mul32BitNormalized, .TEST_VAL_1, .TEST_VAL_2, .TEXT_MUL_1
    +expectValue .TEST_VAL_2, .MINUS_ONE 
; --------------------------------------------------    
    +perfTestMono square32BitNormalized, .TEST_VAL_1, .TEXT_SQUARE_1
    +expectValue .TEST_VAL_1, .PLUS_ONE
; --------------------------------------------------    
    +perfTestCompare cmp32BitUnsigned, .PLUS_TWO, .PLUS_ONE, .TEXT_GT_1
    +expectCarrySet
; --------------------------------------------------    
    +perfTestCompare cmp32BitUnsigned, .PLUS_ONE, .PLUS_TWO, .TEXT_LT_1
    +expectCarryClear
; --------------------------------------------------    
    +perfTestMono square32BitNormalized, .VAL_FOURTH, .TEXT_SQ_1
    +expectValue .VAL_FOURTH, .VAL_16TH 
; --------------------------------------------------    
    +perfTest mul32BitNormalized, .VAL_FOURTH_2, .VAL_HALVE, .TEXT_MUL_2
    +expectValue .VAL_HALVE, .VAL_8TH 
; --------------------------------------------------    
    +perfTest add32Bit, .VAL_1_ADD_1, .VAL_2_ADD_1, .TEXT_ADD_1
    +expectValue .VAL_2_ADD_1, .ADD_1_RES 
; --------------------------------------------------    
    +perfTest mul32BitUnsignedInt, .VAL_1_MUL_3, .VAL_2_MUL_3, .TEXT_MUL_3
    +expectValue .VAL_2_MUL_3, .MUL_3_RES 
; -------------------------------------------------- 
    +printStr .TXT_READING_RTC_I2C 
    +getTimeStr .TIME_STR, RTCI2C
    +printStr .TIME_STR
    jsr printCRLF
    jsr printCRLF
; --------------------------------------------------     
    +printStr .TXT_TIME1
    +cmpTime .TIME2, .TIME3
    +expectCarrySet
    +printStr .TXT_TIME2
    +cmpTime .TIME3, .TIME2
    +expectCarryClear
    +printStr .TXT_TIME3
    +cmpTime .TIME3, .TIME3
    +expectEqual
; --------------------------------------------------
    +printStr .TXT_TIME4
    +diffTimeSimple .TIME5, .TIME4
    +getTimeStr .TIME_STR, .TIME4
    +printStr .TIME_STR
    jsr printCRLF
    +cmpTime .TIME4, .TIME6
    +expectEqual
; --------------------------------------------------
    +printStr .TXT_TIME5
    +diffTimeSimple .TIME8, .TIME7
    +getTimeStr .TIME_STR, .TIME7
    +printStr .TIME_STR
    jsr printCRLF
    +cmpTime .TIME7, .TIME9
    +expectEqual    
; --------------------------------------------------
    +printStr .TXT_TIME6
    +diffTimeSimple .TIME11, .TIME10
    +getTimeStr .TIME_STR, .TIME10
    +printStr .TIME_STR
    jsr printCRLF
    +cmpTime .TIME10, .TIME12
    +expectEqual
; --------------------------------------------------
    +printStr .TXT_TIME7
    +addTimeSimple .TIME13, .TIME14
    +getTimeStr .TIME_STR, .TIME14
    +printStr .TIME_STR
    jsr printCRLF
    +cmpTime .TIME14, .TIME15
    +expectEqual
; --------------------------------------------------
    +printStr .TXT_TIME8
    +diffTime .TIME16, .TIME17
    +getTimeStr .TIME_STR, .TIME17
    +printStr .TIME_STR
    jsr printCRLF
    +cmpTime .TIME18, .TIME17
    +expectEqual
; --------------------------------------------------
    +printStr .TXT_TIME9
    +diffTime .TIME19, .TIME20
    +getTimeStr .TIME_STR, .TIME20
    +printStr .TIME_STR
    jsr printCRLF
    +cmpTime .TIME21, .TIME20
    +expectEqual
; --------------------------------------------------
    ;jsr runOneSequence    
; --------------------------------------------------
.mulDebug
    +perfTest mul32BitNormalized, .VAL_1_MUL_BUG, .VAL_2_MUL_BUG, .TEXT_MUL_BUG
    +expectValue .VAL_2_MUL_BUG, .VAL_3_MUL_BUG 
; --------------------------------------------------    
    +petsciiRect 60, 5, 6, 4
testEnd
    rts