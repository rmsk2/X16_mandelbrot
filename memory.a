
!macro setBank .bankNumAddr {
    lda .bankNumAddr
    sta $0
}

!macro setBankImmediate .bankNum {
    lda #.bankNum
    sta $0
}


BLOCK_CTR
!byte 0

NUM_BLOCKS
!byte 0

!macro readBlocks .numBlocks {
    lda #.numBlocks
    sta NUM_BLOCKS
    jsr readBlocksCall
}

; --------------------------------------------------
; This routine copies a number of 256 byte block from video RAM to banked RAM.
; The number of blocks to copy is given in NUM_BLOCKS. As one RAM bank has 32 blocks
; a bigger value than 32 for NUM_BLOCKS makes no sense.
;
; This routine has no return value.
; --------------------------------------------------
readBlocksCall
    stz BLOCK_CTR
    +load16BitImmediate $A000, MEM_CPY_PTR
    ldy #0
.blockLoopRead
    lda VERA_DATA_0
    sta (MEM_CPY_PTR), y    
    iny
    bne .blockLoopRead
    inc MEM_CPY_PTR + 1
    inc BLOCK_CTR
    lda BLOCK_CTR
    cmp NUM_BLOCKS
    bne .blockLoopRead

    rts


!macro writeBlocks .numBlocks {
    lda #.numBlocks
    sta NUM_BLOCKS
    jsr writeBlocksCall
}

; --------------------------------------------------
; This routine copies a number of 256 byte block from banked RAM to video RAM.
; The number of blocks to copy is given in NUM_BLOCKS. As one RAM bank has 32 blocks
; a bigger value than 32 for NUM_BLOCKS makes no sense.
;
; This routine has no return value.
; --------------------------------------------------
writeBlocksCall
    stz BLOCK_CTR
    +load16BitImmediate $A000, MEM_CPY_PTR
    ldy #0
.blockLoopWrite
    lda (MEM_CPY_PTR), y   
    sta VERA_DATA_0
    iny
    bne .blockLoopWrite
    inc MEM_CPY_PTR + 1
    inc BLOCK_CTR
    lda BLOCK_CTR
    cmp NUM_BLOCKS
    bne .blockLoopWrite

    rts


SAVED_VERA_STATE
!byte 0,0,0

.TARGET_BANK_NUM
!byte 0

.CONST_NUM_FULL_BANKS
!byte 9

.CONST_BLOCKS_IN_LAST_BANK
!byte 12

.FULL_BANK_COUNT
!byte 0

; 8K = 32 * 256
; 320 * 240 = 76800 = 9 * 8K + 3072
; 3072 = 12 * 256
; --------------------------------------------------
; This routine copies the first 76800 bytes of video RAM into banked RAM 
; and thereby save the current state of the hires screen. The banks 32-42 are
; used for this purpose.
;
; This routine has no return value.
; --------------------------------------------------
saveHiresData
    +saveVeraRegisters SAVED_VERA_STATE
    
    lda #32 
    sta .TARGET_BANK_NUM
    stz .FULL_BANK_COUNT
    +selectDataPort0
    +setVRAMStart
    +autoIncOn    

.saveLoopRead
    +setBank .TARGET_BANK_NUM
    +readBlocks 32
    inc .TARGET_BANK_NUM
    inc .FULL_BANK_COUNT
    lda .FULL_BANK_COUNT
    cmp .CONST_NUM_FULL_BANKS
    beq .lastBlockRead
    bra .saveLoopRead
.lastBlockRead
    +setBank .TARGET_BANK_NUM
    +readBlocks 12

    rts

; --------------------------------------------------
; This routine copies video RAM data saved with saveHiresData from
; banked RAM back to video RAM and thereby restores the contents of the
; hires screen. The banks 32-42 are used for this purpose.
;
; This routine has no return value.
; --------------------------------------------------
restoreHiresData
    lda #32 
    sta .TARGET_BANK_NUM
    stz .FULL_BANK_COUNT
    +selectDataPort0
    +setVRAMStart
    +autoIncOn    

.saveLoopWrite
    +setBank .TARGET_BANK_NUM
    +writeBlocks 32
    inc .TARGET_BANK_NUM
    inc .FULL_BANK_COUNT
    lda .FULL_BANK_COUNT
    cmp .CONST_NUM_FULL_BANKS
    beq .lastBlockWrite
    bra .saveLoopWrite
.lastBlockWrite
    +setBank .TARGET_BANK_NUM
    +writeBlocks 12

    +loadVeraRegisters SAVED_VERA_STATE

    rts


.IO_FILE_NUM = 1

.TXT_ERROR_OPEN
!byte 20
!tx "UNABLE TO OPEN FILE"
!byte 13

.TXT_ERROR_WRITE
!byte 21
!tx "UNABLE TO WRITE FILE"
!byte 13

.TXT_SAVE_OK
!byte 23
!tx "FILE SAVED SUCCESFULLY"
!byte 13

.TXT_ERROR_LOAD
!byte 20
!tx "UNABLE TO LOAD FILE"
!byte 13

.TXT_LAOD_OK
!byte 24
!tx "FILE LOADED SUCCESFULLY"
!byte 13


.CONST_BANK_SIZE
!byte 00, $20

.CONST_LAST_BANK_SIZE
!byte 00, $0C

.CONST_PARAM_SIZE
!byte 22, 0

MAX_FILE_NAME_LENGTH = 16

FILE_NAME_SAVE_LOAD
!byte MAX_FILE_NAME_LENGTH
!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

.PREFIX_OVERWRITE
!byte 3
!tx "@0:"
.POSTFIX_SEQ
!byte 4
!tx ",S,W"

.POSTFIX_SEQ_READ
!byte 4
!tx ",S,R"


.WRITE_FILE_NAME
!byte 30
!byte 0,0,0,0,0,0,0,0,0,0
!byte 0,0,0,0,0,0,0,0,0,0
!byte 0,0,0,0,0,0,0,0,0,0

; --------------------------------------------------
; This routine saves the cached video RAM data and the calculation parameters
; to a file on disk. The file name has to be specified as a string at address
; FILE_NAME_SAVE_LOAD.
;
;
; This routine returns DISK_IO_OK in accu if no error occurred.
; --------------------------------------------------
saveHiresDataToDisk
    +strCpy .PREFIX_OVERWRITE, .WRITE_FILE_NAME
    +strCat FILE_NAME_SAVE_LOAD, .WRITE_FILE_NAME
    +strCat .POSTFIX_SEQ, .WRITE_FILE_NAME

    +openChannel .IO_FILE_NUM, DEVICE_NUM, 5, .WRITE_FILE_NAME
    bcc .openOK
    jmp .showErrorOpen
.openOK
    lda #32 
    sta .TARGET_BANK_NUM
    stz .FULL_BANK_COUNT

.saveDiskLoopWrite
    +setBank .TARGET_BANK_NUM
    +writeBufferAddr .IO_FILE_NUM, $A000, .CONST_BANK_SIZE
    cmp #DISK_IO_OK
    bne .showErrorWriteAndClose
    inc .TARGET_BANK_NUM
    inc .FULL_BANK_COUNT
    lda .FULL_BANK_COUNT
    cmp .CONST_NUM_FULL_BANKS
    beq .lastBlockDiskWrite
    bra .saveDiskLoopWrite

.lastBlockDiskWrite
    +setBank .TARGET_BANK_NUM
    +writeBufferAddr .IO_FILE_NUM, $A000, .CONST_LAST_BANK_SIZE
    cmp #DISK_IO_OK
    bne .showErrorWriteAndClose

    +writeBufferAddr .IO_FILE_NUM, STEP_X, .CONST_PARAM_SIZE
    cmp #DISK_IO_OK
    bne .showErrorWriteAndClose

    lda #.IO_FILE_NUM
    jsr CLOSE
    +printStrAt MAIN_MENU_X, MAIN_MENU_Y + 8, .TXT_SAVE_OK
    lda #DISK_IO_OK
    rts
.showErrorWriteAndClose
    lda #.IO_FILE_NUM
    jsr CLOSE
    +printStrAt MAIN_MENU_X, MAIN_MENU_Y + 8, .TXT_ERROR_WRITE
    lda #DISK_IO_ERR
    rts
.showErrorOpen
    +printStrAt MAIN_MENU_X, MAIN_MENU_Y + 8, .TXT_ERROR_OPEN
    lda #DISK_IO_ERR
    rts


.READ_FILE_NAME
!byte 30
!byte 0,0,0,0,0,0,0,0,0,0
!byte 0,0,0,0,0,0,0,0,0,0
!byte 0,0,0,0,0,0,0,0,0,0

; --------------------------------------------------
; This routine loads data from disk into the cached video RAM data and the 
; calculation parameters. The file name has to be specified as a string at 
; address FILE_NAME_SAVE_LOAD.
;
; This routine returns DISK_IO_OK in accu if no error occurred.
; --------------------------------------------------
loadHiresDataFromDisk
    +strCpy FILE_NAME_SAVE_LOAD, .READ_FILE_NAME
    +strCat .POSTFIX_SEQ_READ, .READ_FILE_NAME

    +openChannel .IO_FILE_NUM, DEVICE_NUM, 5, .READ_FILE_NAME
    bcc .openLoadOK
    jmp .showErrorOpen
.openLoadOK
    lda #32 
    sta .TARGET_BANK_NUM
    stz .FULL_BANK_COUNT

.loadDiskLoopWrite
    +setBank .TARGET_BANK_NUM
    +readBufferAddr .IO_FILE_NUM, $A000, .CONST_BANK_SIZE
    cmp #DISK_IO_OK
    bne .showErrorLoadAndClose
    inc .TARGET_BANK_NUM
    inc .FULL_BANK_COUNT
    lda .FULL_BANK_COUNT
    cmp .CONST_NUM_FULL_BANKS
    beq .lastBlockDiskLoad
    bra .loadDiskLoopWrite

.lastBlockDiskLoad
    +setBank .TARGET_BANK_NUM
    +readBufferAddr .IO_FILE_NUM, $A000, .CONST_LAST_BANK_SIZE
    cmp #DISK_IO_OK
    bne .showErrorLoadAndClose

    +readBufferAddr .IO_FILE_NUM, STEP_X, .CONST_PARAM_SIZE
    cmp #DISK_IO_OK
    bne .showErrorLoadAndClose

    lda #.IO_FILE_NUM
    jsr CLOSE
    +printStr .TXT_LAOD_OK
    lda #DISK_IO_OK
    rts
.showErrorLoadAndClose
    lda #.IO_FILE_NUM
    jsr CLOSE
    ;+printStr .TXT_ERROR_LOAD
    lda #DISK_IO_ERR
    rts
